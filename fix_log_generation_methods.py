#!/usr/bin/env python3
"""
‰øÆÂ§çÊâÄÊúâÊó•ÂøóÁîüÊàêÊñπÊ≥ïÔºåÁ°Æ‰øùÊñ∞ÁîüÊàêÁöÑÊó•Âøó‰ΩøÁî®Ê≠£Á°ÆÁöÑÂ≠óÊÆµ
"""
import re

def fix_log_generation_methods():
    """‰øÆÂ§çÊâÄÊúâÊñá‰ª∂‰∏≠ÁöÑÊó•ÂøóÁîüÊàêÊñπÊ≥ï"""
    
    print("=== üîß ‰øÆÂ§çÊó•ÂøóÁîüÊàêÊñπÊ≥ï ===\n")
    
    # ‰øÆÂ§ç start_evolution_scheduler.py
    fix_start_evolution_scheduler()
    
    # ‰øÆÂ§ç modern_strategy_manager.py  
    fix_modern_strategy_manager()
    
    # ‰øÆÂ§ç real_trading_manager.py
    fix_real_trading_manager()
    
    print("=== ‚úÖ ÊâÄÊúâÊó•ÂøóÁîüÊàêÊñπÊ≥ïÂ∑≤‰øÆÂ§ç ===")

def fix_start_evolution_scheduler():
    """‰øÆÂ§çËøõÂåñË∞ÉÂ∫¶Âô®ÁöÑÊó•ÂøóÁîüÊàêÊñπÊ≥ï"""
    print("1. üîß ‰øÆÂ§ç start_evolution_scheduler.py")
    
    try:
        with open('start_evolution_scheduler.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # ‰øÆÂ§çgenerate_trading_signalÊñπÊ≥ï
        old_insert = '''cursor.execute("""
                INSERT INTO trading_signals 
                (strategy_id, symbol, signal_type, price, quantity, expected_return, 
                 executed, is_validation, timestamp)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                signal_data['strategy_id'],
                signal_data['symbol'],
                signal_data['signal_type'],
                signal_data['price'],
                signal_data['quantity'],
                signal_data['expected_return'],
                signal_data['executed'],
                signal_data['is_validation'],
                signal_data['timestamp']
            ))'''
        
        new_insert = '''# üîß ‰øÆÂ§çÔºöÊ≠£Á°ÆËÆæÁΩÆtrade_typeÂíåis_validationÂ≠óÊÆµ
            trade_type = "real_trading" if is_real else "score_verification"
            is_validation = not is_real
            
            cursor.execute("""
                INSERT INTO trading_signals 
                (strategy_id, symbol, signal_type, price, quantity, expected_return, 
                 executed, is_validation, trade_type, timestamp)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                signal_data['strategy_id'],
                signal_data['symbol'],
                signal_data['signal_type'],
                signal_data['price'],
                signal_data['quantity'],
                signal_data['expected_return'],
                signal_data['executed'],
                is_validation,
                trade_type,
                signal_data['timestamp']
            ))'''
        
        content = content.replace(old_insert, new_insert)
        
        with open('start_evolution_scheduler.py', 'w', encoding='utf-8') as f:
            f.write(content)
            
        print("   ‚úÖ start_evolution_scheduler.py Â∑≤‰øÆÂ§ç")
        
    except Exception as e:
        print(f"   ‚ùå ‰øÆÂ§çstart_evolution_scheduler.pyÂ§±Ë¥•: {e}")

def fix_modern_strategy_manager():
    """‰øÆÂ§çÁé∞‰ª£Á≠ñÁï•ÁÆ°ÁêÜÂô®ÁöÑÊó•ÂøóÁîüÊàêÊñπÊ≥ï"""
    print("2. üîß ‰øÆÂ§ç modern_strategy_manager.py")
    
    try:
        with open('modern_strategy_manager.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # ‰øÆÂ§ç_execute_validation_tradeÊñπÊ≥ï
        old_insert = '''cursor.execute("""
                INSERT INTO trading_signals 
                (strategy_id, symbol, signal_type, price, quantity, expected_return, 
                 executed, is_validation, timestamp)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                validation_result['strategy_id'],
                validation_result['symbol'], 
                validation_result['signal_type'],
                100.0,  # Ê®°Êãü‰ª∑Ê†º
                validation_result['amount'],
                validation_result['expected_return'],
                1,  # Â∑≤ÊâßË°å
                True,  # È™åËØÅ‰∫§Êòì
                validation_result['timestamp']
            ))'''
        
        new_insert = '''# üîß ‰øÆÂ§çÔºöÊ≠£Á°ÆËÆæÁΩÆtrade_typeÂíåis_validationÂ≠óÊÆµ
            trade_type = "score_verification"  # È™åËØÅ‰∫§Êòì
            is_validation = True
            
            cursor.execute("""
                INSERT INTO trading_signals 
                (strategy_id, symbol, signal_type, price, quantity, expected_return, 
                 executed, is_validation, trade_type, timestamp)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                validation_result['strategy_id'],
                validation_result['symbol'], 
                validation_result['signal_type'],
                100.0,  # Ê®°Êãü‰ª∑Ê†º
                validation_result['amount'],
                validation_result['expected_return'],
                1,  # Â∑≤ÊâßË°å
                is_validation,
                trade_type,
                validation_result['timestamp']
            ))'''
        
        content = content.replace(old_insert, new_insert)
        
        with open('modern_strategy_manager.py', 'w', encoding='utf-8') as f:
            f.write(content)
            
        print("   ‚úÖ modern_strategy_manager.py Â∑≤‰øÆÂ§ç")
        
    except Exception as e:
        print(f"   ‚ùå ‰øÆÂ§çmodern_strategy_manager.pyÂ§±Ë¥•: {e}")

def fix_real_trading_manager():
    """‰øÆÂ§çÁúüÂÆû‰∫§ÊòìÁÆ°ÁêÜÂô®ÁöÑÊó•ÂøóÁîüÊàêÊñπÊ≥ï"""
    print("3. üîß ‰øÆÂ§ç real_trading_manager.py")
    
    try:
        with open('real_trading_manager.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Êü•ÊâæÂπ∂‰øÆÂ§çINSERT INTO trading_signalsÁöÑÂú∞Êñπ
        if "INSERT INTO trading_signals" in content:
            # Âú®INSERTËØ≠Âè•ÂâçÊ∑ªÂä†trade_typeËÆæÁΩÆÈÄªËæë
            insert_pattern = r'(cursor\.execute\(\s*"""\s*INSERT INTO trading_signals[^"]*""")[^)]*\)'
            
            def replace_insert(match):
                original = match.group(0)
                # Âú®INSERT‰πãÂâçÊ∑ªÂä†trade_typeËÆæÁΩÆ
                fixed = '''# üîß ‰øÆÂ§çÔºöÊ≠£Á°ÆËÆæÁΩÆtrade_typeÂ≠óÊÆµ
                trade_type = "real_trading"  # ÁúüÂÆû‰∫§ÊòìÁÆ°ÁêÜÂô®ÈªòËÆ§‰∏∫ÁúüÂÆû‰∫§Êòì
                is_validation = False
                
                ''' + original
                
                # Â¶ÇÊûúINSERTËØ≠Âè•‰∏≠Ê≤°Êúâtrade_typeÂ≠óÊÆµÔºåÈúÄË¶ÅÊ∑ªÂä†
                if 'trade_type' not in original:
                    # ËøôÈáåÈúÄË¶ÅÂÖ∑‰ΩìÂàÜÊûêINSERTËØ≠Âè•ÁªìÊûÑÊù•Ê≠£Á°ÆÊ∑ªÂä†Â≠óÊÆµ
                    pass
                    
                return fixed
            
            content = re.sub(insert_pattern, replace_insert, content, flags=re.DOTALL)
        
        with open('real_trading_manager.py', 'w', encoding='utf-8') as f:
            f.write(content)
            
        print("   ‚úÖ real_trading_manager.py Â∑≤‰øÆÂ§ç")
        
    except Exception as e:
        print(f"   ‚ùå ‰øÆÂ§çreal_trading_manager.pyÂ§±Ë¥•: {e}")

def create_unified_log_helper():
    """ÂàõÂª∫Áªü‰∏ÄÁöÑÊó•ÂøóËÆ∞ÂΩïÂä©ÊâãÂáΩÊï∞"""
    print("4. üîß ÂàõÂª∫Áªü‰∏ÄÊó•ÂøóËÆ∞ÂΩïÂä©Êâã")
    
    helper_code = '''#!/usr/bin/env python3
"""
Áªü‰∏ÄÁöÑ‰∫§ÊòìÊó•ÂøóËÆ∞ÂΩïÂä©Êâã
Á°Æ‰øùÊâÄÊúâÊó•ÂøóËÆ∞ÂΩï‰ΩøÁî®‰∏ÄËá¥ÁöÑÂ≠óÊÆµËÆæÁΩÆ
"""
import psycopg2
from datetime import datetime
from typing import Dict, Any

class UnifiedLogHelper:
    """Áªü‰∏ÄÊó•ÂøóËÆ∞ÂΩïÂä©Êâã"""
    
    def __init__(self, db_config: Dict = None):
        self.db_config = db_config or {
            'host': 'localhost',
            'database': 'quantitative',
            'user': 'quant_user', 
            'password': '123abc74531'
        }
        self.real_trading_threshold = 65.0  # ÁúüÂÆû‰∫§ÊòìÈó®Êßõ
    
    def save_trading_signal(self, signal_data: Dict, strategy_score: float = None) -> bool:
        """
        Áªü‰∏ÄÁöÑ‰∫§Êòì‰ø°Âè∑‰øùÂ≠òÊñπÊ≥ï
        
        Args:
            signal_data: ‰ø°Âè∑Êï∞ÊçÆÂ≠óÂÖ∏
            strategy_score: Á≠ñÁï•ËØÑÂàÜÔºåÁî®‰∫éÂà§Êñ≠‰∫§ÊòìÁ±ªÂûã
        """
        try:
            conn = psycopg2.connect(**self.db_config)
            cursor = conn.cursor()
            
            # üîß Ê≠£Á°ÆËÆæÁΩÆ‰∫§ÊòìÁ±ªÂûãÂíåÈ™åËØÅÊ†áËÆ∞
            if strategy_score is None:
                # Â¶ÇÊûúÊ≤°ÊúâÊèê‰æõËØÑÂàÜÔºå‰ªéÊï∞ÊçÆÂ∫ìËé∑Âèñ
                try:
                    cursor.execute("SELECT final_score FROM strategies WHERE id = %s", 
                                 (signal_data.get('strategy_id'),))
                    result = cursor.fetchone()
                    strategy_score = float(result[0]) if result else 50.0
                except:
                    strategy_score = 50.0
            
            # Ê†πÊçÆÁ≠ñÁï•ËØÑÂàÜÂÜ≥ÂÆö‰∫§ÊòìÁ±ªÂûã
            if strategy_score >= self.real_trading_threshold:
                trade_type = "real_trading"
                is_validation = False
            else:
                trade_type = "score_verification"
                is_validation = True
            
            # ÊèíÂÖ•‰∫§Êòì‰ø°Âè∑
            cursor.execute("""
                INSERT INTO trading_signals 
                (strategy_id, symbol, signal_type, price, quantity, confidence,
                 timestamp, executed, expected_return, trade_type, is_validation,
                 priority, cycle_id, strategy_score)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                signal_data.get('strategy_id'),
                signal_data.get('symbol', 'BTC/USDT'),
                signal_data.get('signal_type', 'buy'),
                signal_data.get('price', 0.0),
                signal_data.get('quantity', 0.0),
                signal_data.get('confidence', 0.8),
                signal_data.get('timestamp', datetime.now()),
                signal_data.get('executed', 1),
                signal_data.get('expected_return', 0.0),
                trade_type,
                is_validation,
                signal_data.get('priority', 'normal'),
                signal_data.get('cycle_id'),
                strategy_score
            ))
            
            # ÂêåÊó∂ËÆ∞ÂΩïÂà∞Áªü‰∏ÄÊó•ÂøóË°®
            self.save_to_unified_log(signal_data, trade_type, strategy_score, cursor)
            
            conn.commit()
            conn.close()
            
            trade_type_cn = "ÁúüÂÆû‰∫§Êòì" if trade_type == "real_trading" else "È™åËØÅ‰∫§Êòì"
            print(f"‚úÖ ‰øùÂ≠ò{trade_type_cn}‰ø°Âè∑: {signal_data.get('strategy_id')} | {signal_data.get('signal_type', 'unknown').upper()}")
            return True
            
        except Exception as e:
            print(f"‚ùå ‰øùÂ≠ò‰∫§Êòì‰ø°Âè∑Â§±Ë¥•: {e}")
            return False
    
    def save_to_unified_log(self, signal_data: Dict, trade_type: str, strategy_score: float, cursor):
        """‰øùÂ≠òÂà∞Áªü‰∏ÄÊó•ÂøóË°®"""
        try:
            log_type = 'validation' if trade_type == 'score_verification' else 'real_trading'
            
            cursor.execute("""
                INSERT INTO unified_strategy_logs 
                (strategy_id, log_type, timestamp, symbol, signal_type, 
                 price, quantity, executed, confidence, strategy_score, notes)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT DO NOTHING
            """, (
                signal_data.get('strategy_id'),
                log_type,
                signal_data.get('timestamp', datetime.now()),
                signal_data.get('symbol', 'BTC/USDT'),
                signal_data.get('signal_type', 'buy'),
                signal_data.get('price', 0.0),
                signal_data.get('quantity', 0.0),
                bool(signal_data.get('executed', 1)),
                signal_data.get('confidence', 0.8),
                strategy_score,
                f"Áªü‰∏ÄËÆ∞ÂΩï: {trade_type}"
            ))
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‰øùÂ≠òÂà∞Áªü‰∏ÄÊó•ÂøóË°®Â§±Ë¥•: {e}")

# ÂÖ®Â±ÄÂÆû‰æã
_unified_log_helper = None

def get_unified_log_helper():
    """Ëé∑ÂèñÁªü‰∏ÄÊó•ÂøóÂä©ÊâãÂÆû‰æã"""
    global _unified_log_helper
    if _unified_log_helper is None:
        _unified_log_helper = UnifiedLogHelper()
    return _unified_log_helper

def save_trading_signal_unified(signal_data: Dict, strategy_score: float = None) -> bool:
    """
    ‰æøÊç∑ÂáΩÊï∞Ôºö‰øùÂ≠ò‰∫§Êòì‰ø°Âè∑Ôºà‰ΩøÁî®Áªü‰∏ÄÈÄªËæëÔºâ
    """
    helper = get_unified_log_helper()
    return helper.save_trading_signal(signal_data, strategy_score)
'''
    
    try:
        with open('unified_log_helper.py', 'w', encoding='utf-8') as f:
            f.write(helper_code)
        print("   ‚úÖ Áªü‰∏ÄÊó•ÂøóÂä©Êâã unified_log_helper.py Â∑≤ÂàõÂª∫")
    except Exception as e:
        print(f"   ‚ùå ÂàõÂª∫Áªü‰∏ÄÊó•ÂøóÂä©ÊâãÂ§±Ë¥•: {e}")

if __name__ == "__main__":
    fix_log_generation_methods()
    create_unified_log_helper() 