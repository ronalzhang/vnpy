---
description: 
globs: 
alwaysApply: true
---
# 代码更新和开发规则

## 🚀 基础开发流程规则

1. **代码修改流程**：代码只在本地修改，修改好后提交到GitHub仓库，再从服务器拉取更新。不能在服务器上修改代码和配置，但要在本地有同步文档记录。

2. **运行环境分工**：本地只用于修复代码，运行应用并检查运行情况的事情全部要在服务器上进行。

3. **代码清理和修复原则**：
   - **最小改动原则**：只修改必要的逻辑，避免不必要的重构
   - **保留原有架构**：不重新设计系统架构，在现有基础上修复
   - **修复而非重写**：在原有代码基础上修复问题，而不是创建新的实现
   - **避免重复实现**：检查现有功能，移除重复的代码逻辑
   - **数据库统一**：统一使用PostgreSQL，禁止混用SQLite或其他数据库

## ⚡ Python语法和结构规则

- **缩进一致性**：所有字典定义必须保持一致的缩进，避免混合空格和制表符
- **循环结构**：for循环内的代码块必须正确缩进，cursor.execute等数据库操作必须在循环内部
- **语法检查**：修改代码前必须先进行语法检查：`python -m py_compile 文件名`
- **嵌套结构**：复杂的嵌套结构（字典、列表、函数调用）必须使用一致的缩进风格

## 🔧 配置管理和同步规则

- **三端同步**：前后端配置修改必须同时更新数据库配置表和JavaScript配置对象
- **默认值一致性**：配置项的默认值必须在前端、后端、数据库三处保持一致
- **参数同步添加**：新增配置参数时必须在HTML表单、JavaScript处理、后端API三处同步添加
- **关键参数重载**：淘汰阈值、验证次数等关键参数修改必须触发全系统配置重载

## 🗄️ 数据库操作规则

- **异常处理**：所有数据库查询必须包含异常处理，避免因表不存在导致系统崩溃
- **冲突预防**：INSERT语句必须使用`ON CONFLICT DO NOTHING`或`ON DUPLICATE KEY UPDATE`防止主键冲突
- **表结构检查**：配置更新操作必须先检查表结构存在性，再执行更新

## 🚢 部署和版本控制规则

- **紧急修复**：语法错误修复必须立即提交，避免阻塞其他功能开发
- **部署流程**：服务器部署流程为：本地测试 → git push → 服务器 git pull → pm2 restart
- **配置测试**：配置文件修改必须在本地测试通过后再推送到生产环境
- **完整性验证**：关键功能修复后必须验证前端显示和后端逻辑的完整性

## 🛡️ 错误恢复和监控规则

- **启动检查**：系统启动时必须检查关键配置的完整性和有效性
- **显示异常优先级**：策略显示异常时优先检查数据库连接和SQL语句语法
- **降级方案**：参数同步失败时必须提供降级方案，使用默认配置保持系统运行

## 🎨 UI/UX开发规则 (新增)

- **样式复用优先**：优先修复和增强现有CSS样式类，避免创建重复的专用样式
- **功能验证**：HTML结构已存在时，应检查现有样式类的适用性，避免过度设计
- **响应式考虑**：UI改进必须考虑移动端兼容性和响应式布局
