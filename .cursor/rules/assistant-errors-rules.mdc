---
description: 
globs: 
alwaysApply: true
---
# 助手常犯错误防范规则

## 核心工作流程规则 (严格执行)
- "禁止跳过检查现有代码直接新增功能 - 必须先用codebase_search、grep_search、read_file等工具全面检查现有实现"
- "严格遵循部署流程：本地修改→提交仓库→服务器拉取→应用重启 - 缺少任何一步都是不完整的部署"
- "禁止在服务器上直接修改代码或配置 - 所有修改必须在本地完成后推送"

## 重复功能创建防范
- "禁止创建重复的服务/功能 - 如WebSocket服务器、状态管理器等，先检查是否已存在"
- "禁止创建重复的PM2进程 - 检查ecosystem.config.js避免端口冲突"
- "禁止重复实现已存在的类/函数 - 如GlobalStatusManager等"

## 软件包管理规范
- "禁止随意安装已存在的软件包 - 用pip list或requirements.txt检查现有依赖"
- "安装新包前必须检查版本兼容性"

## SSH命令语法规范
- "SSH命令中避免双重引号嵌套 - 正确格式: ssh user@host 'command'"
- "包含特殊字符的命令使用转义或单引号"

## 文件管理规范
- "系统文档(.md)禁止提交到仓库 - 仅保留在本地，服务器也不要有"
- "禁止创建临时文件后不清理"
- "禁止删除VNPY框架原生文档"

## 调试方法规范
- "解决问题前必须先诊断根本原因 - 不要症状性修复"
- "使用并行工具调用提高效率 - grep_search、read_file等可并行执行"
- "检查日志文件了解系统状态 - 特别是PM2日志"

## 代码修改原则
- "优先修复现有代码而非新增 - edit_file优于create new file"
- "修改大文件(>2500行)使用search_replace工具"
- "确保所有import语句和依赖完整"

## 系统架构理解要求
- "必须理解前后端分离架构 - web_app.py(前端) + quantitative_service.py(后端)"
- "理解PM2进程角色分工 - 避免功能重叠"
- "检查端口占用避免冲突"

## 验证和测试要求
- "每次修改后必须验证功能正常 - 特别是关键业务逻辑"
- "修复错误时要测试相关联的功能"
- "部署后检查所有服务状态"

## 量化交易特有规则
- "量化交易策略必须包含完善的风控机制"
- "交易操作必须有日志记录"
- "所有金额计算使用Decimal类型而非float"
- "套利策略必须考虑手续费和滑点"
- "金额计算必须使用Decimal类型 - 避免float精度问题"
- "风控机制是必需的，不是可选的"
