#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\n修复系统状态数据库记录\n确保状态正确反映实际运行情况\n\"\"\"\n\nimport psycopg2\nfrom datetime import datetime\nimport json\n\ndef fix_system_status():\n    \"\"\"修复系统状态记录\"\"\"\n    try:\n        # 连接PostgreSQL数据库\n        conn = psycopg2.connect(\n            host=\"localhost\",\n            database=\"quantitative\",\n            user=\"quant_user\",\n            password=\"quant_password\",\n            port=\"5432\"\n        )\n        \n        cursor = conn.cursor()\n        \n        print(\"🔧 开始修复系统状态...\")\n        \n        # 1. 查询当前策略数量\n        cursor.execute(\"SELECT COUNT(*) FROM strategies\")\n        total_strategies = cursor.fetchone()[0]\n        \n        cursor.execute(\"SELECT COUNT(*) FROM strategies WHERE enabled = true\")\n        running_strategies = cursor.fetchone()[0]\n        \n        cursor.execute(\"SELECT COUNT(*) FROM strategies WHERE final_score >= 65\")\n        selected_strategies = cursor.fetchone()[0]\n        \n        print(f\"📊 策略统计: 总数={total_strategies}, 运行={running_strategies}, 精选={selected_strategies}\")\n        \n        # 2. 更新系统状态记录\n        cursor.execute(\"\"\"\n            INSERT INTO system_status \n            (id, quantitative_running, auto_trading_enabled, total_strategies, \n             running_strategies, selected_strategies, current_generation, \n             evolution_enabled, last_evolution_time, last_update_time, \n             system_health, notes)\n            VALUES (1, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n            ON CONFLICT (id) DO UPDATE SET\n                quantitative_running = EXCLUDED.quantitative_running,\n                auto_trading_enabled = EXCLUDED.auto_trading_enabled,\n                total_strategies = EXCLUDED.total_strategies,\n                running_strategies = EXCLUDED.running_strategies,\n                selected_strategies = EXCLUDED.selected_strategies,\n                current_generation = EXCLUDED.current_generation,\n                evolution_enabled = EXCLUDED.evolution_enabled,\n                last_evolution_time = EXCLUDED.last_evolution_time,\n                last_update_time = EXCLUDED.last_update_time,\n                system_health = EXCLUDED.system_health,\n                notes = EXCLUDED.notes\n        \"\"\", (\n            True,  # quantitative_running\n            True,  # auto_trading_enabled\n            total_strategies,\n            running_strategies,\n            selected_strategies,\n            1,     # current_generation\n            True,  # evolution_enabled\n            datetime.now(),  # last_evolution_time\n            datetime.now(),  # last_update_time\n            'online',  # system_health\n            '系统正常运行，进化引擎活跃'  # notes\n        ))\n        \n        conn.commit()\n        \n        # 3. 验证更新结果\n        cursor.execute(\"\"\"\n            SELECT quantitative_running, auto_trading_enabled, total_strategies,\n                   running_strategies, selected_strategies, system_health\n            FROM system_status WHERE id = 1\n        \"\"\")\n        \n        result = cursor.fetchone()\n        if result:\n            print(\"✅ 系统状态已更新:\")\n            print(f\"   量化系统运行: {result[0]}\")\n            print(f\"   自动交易启用: {result[1]}\")\n            print(f\"   策略总数: {result[2]}\")\n            print(f\"   运行策略: {result[3]}\")\n            print(f\"   精选策略: {result[4]}\")\n            print(f\"   系统健康: {result[5]}\")\n        \n        cursor.close()\n        conn.close()\n        \n        print(\"🎯 系统状态修复完成！\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ 修复系统状态失败: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    fix_system_status() 